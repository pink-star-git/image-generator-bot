# markup | 2023
# by SapeNeCo, zebra

import aiosqlite
from telebot import types
from pyqiwip2p import QiwiP2P
from PIL import Image
from conflib import Configs, Config
from req import Req2neuro
import random 
from random import random, randrange, randint
# QIWI_PRIV_KEY = 'eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6ImdiMjB4Zy0wMCIsInVzZXJfaWQiOiI3OTUwNTE3NDg2MiIsInNlY3JldCI6IjdkMmIzNDk1ZDVlZDI5NjQ1N2MzYmJhMWE3NjU5NDgzYzdkYjg3ODk4NDdmODczZDUyYTY3MWQxMGY0MDljZTYifX0='

configs = Configs()
configs.add_config('main', 'main', '')
main_conf = configs.get_config('main')

p2p = QiwiP2P(auth_key = main_conf.cfg_d['QIWI_PRIV_KEY'])

messbutton = types.InlineKeyboardMarkup()

barsbutton = types.ReplyKeyboardMarkup()


async def init_bd():
    async with aiosqlite.connect('bot.db', check_same_thread=False) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT,
            id BIGINT,
            bill_id TEXT,
            buy_channel TEXT,
            level INT,
            days INT,
            model TEXT,
            cfg REAL,
            size_height INT,
            size_width INT,
            countpic INT,
            sampler TEXT
        )""")
        await db.commit()

all_buy = '–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω'

buttons = {
    'packs':       types.InlineKeyboardButton(text='üí∏‚îÉ –ö—É–ø–∏—Ç—å/–£–ª—É—á—à–∏—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data='packs'),
    'packs_info':  types.InlineKeyboardButton(text='‚ÑπÔ∏è‚îÉ –¢–∞—Ä–∏—Ñ—ã', url='https://v-v.host/tariffs/'),
    'buy_packs':   types.InlineKeyboardButton(text='‚ÑπÔ∏è ‚îÉ–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç', url='https://v-v.host/how_work_bot/'),
    'my_property': types.InlineKeyboardButton(text='‚ÑπÔ∏è ‚îÉ –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='my_property'),
    'buy':      types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data='buy'),
    'low':      types.InlineKeyboardButton(text=' ‚ú®üåù‚îÉ Stable Diffusion Low | 250p', callback_data='low'),
    'medium':   types.InlineKeyboardButton(text=' üåó‚îÉStable Diffusion Medium | 600p', callback_data='medium'),
    'premium':  types.InlineKeyboardButton(text=' üåö‚ú®‚îÉStable Diffusion Premium | 1200p', callback_data='premium'),
    'check':    types.InlineKeyboardButton(text='üîÉ‚îÉ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂', callback_data='check'),
    'menu':     types.InlineKeyboardButton(text='‚ÑπÔ∏è‚îÉ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start'),

    #models button
    'StableDiffusion-1.5':  types.InlineKeyboardButton(text='StableDiffusion-1.5', callback_data='/model StableDiffusion-1.5'),
    'StableDiffusion-2.0':  types.InlineKeyboardButton(text='StableDiffusion-2.0', callback_data='/model StableDiffusion-2.0'),
    'StableDiffusion-2.1':  types.InlineKeyboardButton(text='StableDiffusion-2.1', callback_data='/model StableDiffusion-2.1'),
    'DreamLike-0-2':        types.InlineKeyboardButton(text='DreamLike-0-2', callback_data='/model DreamLike-0-2'),
    'DreamLike-0-1':        types.InlineKeyboardButton(text='DreamLike-0-1', callback_data='/model DreamLike-0-1'),
    'PastelMix':            types.InlineKeyboardButton(text='PastelMix', callback_data='/model PastelMix'),
    'EimisAnimeDiffusion':  types.InlineKeyboardButton(text='EimisAnimeDiffusion', callback_data='/model EimisAnimeDiffusion'),
    'Deliberate':           types.InlineKeyboardButton(text='Deliberate', callback_data='/model Deliberate'),
    'Realistic-vision-v13': types.InlineKeyboardButton(text='Realistic-vision-v13', callback_data='/model Realistic-vision-v13'),
    'ChilloutMix':          types.InlineKeyboardButton(text='ChilloutMix', callback_data='/model ChilloutMix'),
    'Grapefruit':           types.InlineKeyboardButton(text='Grapefruit', callback_data='/model Grapefruit'),
    'Project-Unreal':       types.InlineKeyboardButton(text='Project-Unreal', callback_data='/model Project-Unreal'),
    'Wlop':                 types.InlineKeyboardButton(text='wlop', callback_data='/model Wlop'),
    'Ayonimix':             types.InlineKeyboardButton(text='ayonimix', callback_data='/model Ayonimix'),
    'Kotosmix':             types.InlineKeyboardButton(text='kotosmix', callback_data='/model Kotosmix'),
    'Furtasticv':           types.InlineKeyboardButton(text='Furtasticv', callback_data='/model Furtasticv'),
    'FutaGen':              types.InlineKeyboardButton(text='FutaGen', callback_data='/model FutaGen'),
}

messages = {
    'hello': '–û, –∑–¥—Ä–≤–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –∏–∑ [–ø–∞–±–ª–∏–∫–∞ "–Ø –≤–ª—é–±–∏–ª—Å—è –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"](https://vk.com/iloveyouneyroweb)?\n–Ø –≤–∞—à–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ —è —É–º–µ—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. \n\n–î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º—Å—è, –ø–æ —Ç–æ–º—É, –∫–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–µ–±–µ –Ω—É–∂–Ω—ã –∏ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤—ã–π–¥–µ—Ç –≤ –º–µ—Å—è—Ü.\n[–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤^^](http://example.com/link)',
    'hello_client': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n üåü‚îÉ –¢–µ–±—è —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, —Å–æ–ª–Ω—Ü–µ?',
    'sells': '–ß—Ç–æ–∂, —É –º–µ–Ω—è, –µ—Å—Ç—å —Ç–∞–∫–æ–π –≤–æ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–∞—Ä–∏—Ñ–æ–≤, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?',
    'resend': '‚ùì‚îÉ –Ø —Ç–µ–±—è, —É–≤—ã, –Ω–µ –ø–æ–Ω–∏–º–∞—é. \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/–∞—Ä–≥—É–º–µ—Ç–æ–≤. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help.',
    'help': '‚ùì‚îÉ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞–ø–∏—à–∏ –º–Ω–µ `/sells` \n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–≤–µ–¥–∏ /bot_help',
    'low': '‚ÑπÔ∏è ‚îÉ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —Å—Ç—ç–±–ª–∞ —Å NSFW –∏ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–∫—Ä—É—Ç–æ–∫,\n–í—Å–µ–≥–æ –∑–∞ 250—Ä/–º–µ—Å', 
    'medium': '‚ÑπÔ∏è ‚îÉ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –í–µ—Ä—Å–∏—è –ë–æ—Ç–∞ —Å —à–∏—Ä–æ–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–µ–π, NSFW –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—Ä—É—Ç–æ–∫ \n600—Ä/–º–µ—Å',
    'premium': '‚ÑπÔ∏è ‚îÉ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –í–µ—Ä—Å–∏—è –ë–æ—Ç–∞ —Å —à–∏—Ä–æ–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–µ–π, –í—Å–µ NSFW –º–æ–¥–µ–ª–∏, –ì–æ—Ä, –§—É—Ä—Ä–∏, –§—É—Ç–∞ –∏ –ø—Ä–æ—á–∏–µ —Å—Ç—Ä–∞—à–Ω—ã–µ –≤–µ—â–∏.\n1200—Ä/–º–µ—Å'
}

prices = {
    'low': 250,
    'medium': 600,
    'premium': 1200
}

max_height = {
    'low': 728,
    'medium': 1024,
    'premium': 2048
}

max_width = {
    'low': 728,
    'medium': 1024,
    'premium': 2048
}

min_height = {
    'low': 0,
    'medium': 0,
    'premium': 0
}

min_width = {
    'low': 0,
    'medium': 0,
    'premium': 0
}

min_countpic = {
    'low': 1,
    'medium': 1,
    'premium': 1
}

max_countpic = {
    'low': 4,
    'medium': 8,
    'premium': 12
}

#–ö–ª—é—á–∏ –º–æ–¥–µ–ª–µ–π | models key

models_low = [
    'StableDiffusion-1.5',
    'StableDiffusion-2.0',
    'StableDiffusion-2.1',
    'DreamLike-0-1',
    'DreamLike-0-2',
    'PastelMix',
    'EimisAnimeDiffusion'
]

models_medium = [
    'StableDiffusion-1.5',
    'StableDiffusion-2.0',
    'StableDiffusion-2.1',
    'DreamLike-0-1',
    'DreamLike-0-2',
    'PastelMix',
    'EimisAnimeDiffusion',
    'Deliberate',
    'Realistic-vision-v13',
    'ChilloutMix',
    'Grapefruit'
]

models_premium = [
    'StableDiffusion-1.5',
    'StableDiffusion-2.0',
    'StableDiffusion-2.1',
    'DreamLike-0-1',
    'DreamLike-0-2',
    'PastelMix',
    'EimisAnimeDiffusion',
    'Deliberate',
    'Realistic-vision-v13',
    'ChilloutMix',
    'Grapefruit',
    'Project-Unreal',
    'Wlop',
    'Ayonimix',
    'Kotosmix',
    'Furtasticv'
]

models = {
    'StableDiffusion-1.5':  'StableDiffusion-1-5.ckpt',
    'StableDiffusion-2.0':  'StableDiffusion-2-0.ckpt',
    'StableDiffusion-2.1':  'StableDiffusion-2-1.ckpt',
    'DreamLike-0-2':        'DreamLike-0-2.ckpt',
    'DreamLike-0-1':        'DreamLike-0-1.ckpt',
    'PastelMix':            'PastelMix.safetensors',
    'EimisAnimeDiffusion':  'EimisAnimeDiffusion.safetensors',
    'Deliberate':           'Deliberate.safetensors',
    'Realistic-vision-v13': 'Realistic-vision-v13.safetensors',
    'ChilloutMix':          'ChilloutMix.safetensors',
    'Grapefruit':           'grapefruit-hentai-model.safetensors',
    'Project-Unreal':       'project-unreal-engine-5.ckpt',
    'Wlop':                 'wlop.ckpt',
    'Ayonimix':             'ayonimix.safetensors',
    'Kotosmix':             'kotosmix.safetensors',
    'Furtasticv':           'furtasticv11.safetensors',
    'FutaGen' :             'futagen.safetensors'
}


#–ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã
async def buy(bot, message):
    channel = await get_value_from_bd("""buy_channel""", message.chat.id)
    comment = str(message.chat.id) + '_' + channel
    bill = p2p.bill(amount = prices[channel], lifetime = 15, comment = comment)
    await set_value_in_bd("""bill_id""", bill.bill_id, message.chat.id)
    buy_btn = types.InlineKeyboardButton(text = "–ö—É–ø–∏—Ç—å", url = bill.pay_url)
    messbutton = types.InlineKeyboardMarkup()
    messbutton.add(buy_btn)
    messbutton.add(buttons['check'])
    messbutton.add(buttons['menu'])
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text='–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ —Ç–∞—Ä–∏—Ñ **Stable Diffusion** –¢–∞—Ä–∏—Ñ.–ü–ª–∞–Ω\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø–æ–ª—É—á–∞–µ–º—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å Placeholder for Price List',  reply_markup=messbutton)

#–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂
async def check(bot, message):
    bill = await get_value_from_bd("""bill_id""", message.chat.id)
    status = p2p.check(bill_id=bill).status
    match status:
        case 'WAITING':
            await send_message(bot, message, '‚ùì‚îÉ –í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏')
        case 'REJECTED':
            await set_value_in_bd("""bill_id""", '', message.chat.id)
            await set_value_in_bd("""buy_channel""", '', message.chat.id)
            await edit_message(bot, message, '‚ùå‚îÉ –°—á—ë—Ç –æ—Ç–∫–ª–∞–Ω—ë–Ω, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Å–Ω–∞—á–∞–ª–∞',  input_buttons=['packs'])
        case 'EXPIRED':
            await set_value_in_bd("""bill_id""", '', message.chat.id)
            await set_value_in_bd("""buy_channel""", '', message.chat.id)
            await edit_message(bot, message, '‚ùå‚îÉ–í—Ä–µ–º—è —Å—á—ë—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Å–Ω–∞—á–∞–ª–∞',  input_buttons=['packs'])
        case 'PAID':
            match get_value_from_bd("""buy_channel""", message.chat.id):
                case 'low':
                    await set_value_in_bd("""level""", 1, message.chat.id)
                case 'medium':
                    await set_value_in_bd("""level""", 2, message.chat.id)
                case 'premium':
                    await set_value_in_bd("""level""", 3, message.chat.id)
            await set_value_in_bd("""bill_id""", '', message.chat.id)
            await set_value_in_bd("""buy_channel""", '', message.chat.id)
            await set_value_in_bd("""days""", 31, message.chat.id)
            await edit_message(bot, message, '‚úÖ‚îÉ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É. –° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤–∞—à–µ–≥–æ —Ç–∞—Ä—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –∑–¥–µ—Å—å',  input_buttons=['buy_packs', 'packs', 'menu'])

#–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
async def configure(bot, message):
    print(message.text)
    match int(await get_value_from_bd("""level""", message.chat.id)):
        case 0:
            await send_message(bot, message, '‚ùå‚îÉ –í–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞, –∫—É–ø–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º',  input_buttons=['packs', 'menu'])
        case 1:
            match message.text.split(' ')[0]:
                case '/model':
                    if message.text.split(' ')[1] in models_low:
                        await set_value_in_bd("""model""", models[message.text.split(' ')[1]], message.chat.id)
                        await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ `model` –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùå‚îÉ –ù–µ—Ç —Ç–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –≤–∞–º –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])
                case '/cfg':
                    if message.text.split(' ')[1] >= 0:
                        await set_value_in_bd("""cfg""", float(message.text.split(' ')[1]), message.chat.id)
                        await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ cfg –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùå‚îÉ –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∏–ª–∏ 0. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç 6 - 7.5 - 8. –†–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ',  input_buttons=['buy_packs', 'menu'])
                case '/size':
                    if len(message.text.split(' ')) == 3:
                        height = int(message.text.split(' ')[1])
                        width = int(message.text.split(' ')[2])
                        if height >= min_height['low'] and height <= max_height['low'] and width >= min_width['low'] and width <= max_width['low']:
                            await set_value_in_bd("""size_height""", height, message.chat.id)
                            await set_value_in_bd("""size_width""", width, message.chat.id)
                            await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ size –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è ' + message.text.split(' ')[1] + ' ' + message.text.split(' ')[2],  input_buttons=['buy_packs', 'menu'])
                        else:
                            await send_message(bot, message, '‚ùå‚îÉ –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. \n–ü–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',   input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùó‚îÉ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä—ã –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/size [height] [width]`',  parse_mode="Markdown")
                case '/countpic':
                    if int(message.text.split(' ')[1]) >= min_countpic['low'] and int(message.text.split(' ')[1]) <= max_countpic['low']:
                        await set_value_in_bd("""countpic""", int(message.text.split(' ')[1]), message.chat.id)
                        await send_message(bot, message, f'‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è `/countpic` –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ {message.text.split(" ")[1]}',  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùå‚îÉ –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])
                case '/sampler':
                    await set_value_in_bd("""sampler""", message.text.split(' ')[1], message.chat.id)
                    await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ `sampler` –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                case '/generate' | '/prompts':
                    await generate(bot, message)
                case _:
                    await send_message(bot, message, messages['resend'])
        #Stable Diffusion Medium
        case 2:
            match message.text.split(' ')[0]:
                case '/model':
                    if message.text.split(' ')[1] in models_medium:
                        await set_value_in_bd("""model""",  models[message.text.split(' ')[1]], message.chat.id)
                        await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ `model` –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùå‚îÉ –ù–µ—Ç —Ç–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –≤–∞–º –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])
                case '/cfg':
                    if message.text.split(' ')[1] >= 0:
                        await set_value_in_bd("""cfg""", float(message.text.split(' ')[1]), message.chat.id)
                        await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ cfg –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùå‚îÉ –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∏–ª–∏ 0. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç 6 - 7.5 - 8. –†–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ',  input_buttons=['buy_packs', 'menu'])
                case '/size':
                    if len(message.text.split(' ')) == 3:
                        height = int(message.text.split(' ')[1])
                        width = int(message.text.split(' ')[2])
                        if height >= min_height['medium'] and height <= max_height['medium'] and width >= min_width['medium'] and width <= max_width['medium']:
                            await set_value_in_bd("""size_height""", height, message.chat.id)
                            await set_value_in_bd("""size_width""", width, message.chat.id)
                            await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ size –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è ' + message.text.split(' ')[1] + ' ' + message.text.split(' ')[2],  input_buttons=['buy_packs', 'menu'])
                        else:
                            await send_message(bot, message, '‚ùå‚îÉ –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. \n–ü–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',   input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùó‚îÉ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä—ã –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/size [height] [width]`',  parse_mode="Markdown")
                case '/countpic':
                    if int(message.text.split(' ')[1]) >= min_countpic['medium'] and int(message.text.split(' ')[1]) <= max_countpic['medium']:
                        await set_value_in_bd("""countpic""", int(message.text.split(' ')[1]), message.chat.id)
                        await send_message(bot, message, f'‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è `/countpic` –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ {message.text.split(" ")[1]}',  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '‚ùå‚îÉ –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])
                case '/sampler':
                    await set_value_in_bd("""sampler""", message.text.split(' ')[1], message.chat.id)
                    await send_message(bot, message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ `sampler` –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                case '/generate' | '/prompts':
                    await generate(bot, message)
                case _:
                    await send_message(bot, message, messages['resend'])
        case 3 | 777:
            match message.text.split(' ')[0]:
                case '/model':
                    if message.text.split(' ')[1] in models_premium:
                        await set_value_in_bd("""model""",  models[message.text.split(' ')[1]], message.chat.id)
                        await send_message(bot, message, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ model –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '–ù–µ—Ç —Ç–∞–∫–æ–π –º–æ–¥–µ–ª–∏, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])
                case '/cfg':
                    if message.text.split(' ')[1] >= 0:
                        await set_value_in_bd("""cfg""", float(message.text.split(' ')[1]), message.chat.id)
                        await send_message(bot, message, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ cfg –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∏–ª–∏ 0',  input_buttons=['buy_packs', 'menu'])
                case '/size':
                    if len(message.text.split(' ')) == 3:
                        height = int(message.text.split(' ')[1])
                        width = int(message.text.split(' ')[2])
                        if height >= min_height['premium'] and height <= max_height['premium'] and width >= min_width['premium'] and width <= max_width['premium']:
                            await set_value_in_bd("""size_height""", height, message.chat.id)
                            await set_value_in_bd("""size_width""", width, message.chat.id)
                            await send_message(bot, message, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ size –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è ' + message.text.split(' ')[1] + ' ' + message.text.split(' ')[2],  input_buttons=['buy_packs', 'menu'])
                        else:
                            await send_message(bot, message, '–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä—ã –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ /size [height] [width]')
                case '/countpic':
                    if int(message.text.split(' ')[1]) >= min_countpic['premium'] and int(message.text.split(' ')[1]) <= max_countpic['premium']:
                        await set_value_in_bd("""countpic""", int(message.text.split(' ')[1]), message.chat.id)
                        await send_message(bot, message, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ countpic –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ' + int(message.text.split(' ')[1]),  input_buttons=['buy_packs', 'menu'])
                    else:
                        await send_message(bot, message, '–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])
                case '/sampler':
                    await set_value_in_bd("""sampler""", message.text.split(' ')[1], message.chat.id)
                    await send_message(bot, message, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ sampler –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ' + message.text.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
                case '/generate' | '/prompts':
                    await generate(bot, message)
                case _:
                    await send_message(bot, message, messages['resend'])

async def send_modelslist(bot, message):
    match int(await get_value_from_bd("""level""", message.chat.id)):
        case 0:
                    await send_message(bot, message, "‚ùó‚îÉ –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ, –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞")
        case 1:
                    await send_message(bot, message, f'‚î¨'+'\n‚îú'.join(models_low))
        case 2:
                    await send_message(bot, message, f'‚î¨'+'\n‚îú'.join(models_medium))
        case 3 | 777:
                    await send_message(bot, message, f'‚î¨'+'\n‚îú'.join(models_premium))

#–ú–µ–Ω—é –≤—Å—Ç—Ä–µ—á–∏
async def main_menu(bot, message): 
    messbutton = types.InlineKeyboardMarkup()
    messbutton.add(buttons['packs'], buttons['packs_info'])
    message_local = messages['hello']
    if int(await get_value_from_bd("""level""", message.chat.id)) != 0:
        messbutton.add(buttons['buy_packs'])
        messbutton.add(buttons['my_property'])
        message_local = messages['hello_client']
    await bot.send_message(message.chat.id, message_local,  reply_markup = messbutton, parse_mode="Markdown")

#–ú–µ–Ω—é –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def main_menu_edit(bot, message): 
    messbutton = types.InlineKeyboardMarkup()
    messbutton.add(buttons['packs'])
    message_local = messages['hello']
    if int(await get_value_from_bd("""level""", message.chat.id)) != 0:
        messbutton.add(buttons['buy_packs'])
        messbutton.add(buttons['my_property'])
        message_local = messages['hello_client']
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=message_local, parse_mode="Markdown",  reply_markup = messbutton)

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def edit_message(bot, message, text, channel='', input_buttons = [], buy_buttons=False, ):
    if channel != '':
        async with aiosqlite.connect('bot.db', check_same_thread=False) as db:
            await db.execute("""UPDATE users SET buy_channel = ? WHERE id = ?""", (channel, message.chat.id,))
            await db.commit()
    if buy_buttons == True:
        match int(await get_value_from_bd("""level""", message.chat.id)):
            case 0:
                await edit_message(bot, message, text, input_buttons=['low', 'medium', 'premium', 'menu', 'packs_info'])
            case 1:
                await edit_message(bot, message, text, input_buttons=['medium', 'premium', 'menu', 'packs_info'])
            case 2:
                await edit_message(bot, message, text, input_buttons=['premium', 'menu', 'packs_info'])
            case 3:
                await edit_message(bot, message, all_buy)
    elif input_buttons != []:
        messbutton = types.InlineKeyboardMarkup()
        for button in input_buttons:
            messbutton.add(buttons[button])
        await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=text, reply_markup=messbutton)
    else:
        await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=text)



#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message(bot, message, text, input_buttons = []):
    if input_buttons != []:
        messbutton = types.InlineKeyboardMarkup()
        for button in input_buttons:
            messbutton.add(buttons[button])
        await bot.send_message(message.chat.id, text, reply_markup=messbutton)
    else:
        await bot.send_message(message.chat.id, text)

#–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
async def send_photo(bot, message, img:Image=None):
        await bot.send_photo(message.chat.id, photo=img)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
async def insert_user(message):
    async with aiosqlite.connect('bot.db', check_same_thread=False) as db:
        async with db.execute("""SELECT * FROM users WHERE id = ?""", (message.chat.id,)) as cursor:
            if await cursor.fetchone() is None:
                await db.execute("""INSERT INTO users (user_id, id, bill_id, buy_channel, level, days, model, cfg, size_height, size_width, countpic, sampler) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                                                    (message.from_user.id, message.chat.id, '', '', 0, 0, 'PastelMix.ckpt', 7.5, 256, 256, 2, 'DPM2'))
                await db.commit()

#–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–¥ –ø–æ –∫–æ–ª–æ–Ω–∫–µ –∏ id —á–∞—Ç–∞
async def get_value_from_bd(colum, id): #–∑–Ω–∞—á–µ–Ω–∏–µ colum –í–°–ï–ì–î–ê –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –≤ —Ç—Ä–æ–π–Ω—ã—Ö –¥–≤–æ–π–Ω—ã—Ö –∫–æ–≤—ã—á–∫–∞—Ö, —Ç–æ–µ—Å—Ç—å """[colum]"""
    async with aiosqlite.connect('bot.db', check_same_thread=False) as db:
        async with db.execute(f"""SELECT {colum} FROM users WHERE id = ?""", (id,)) as cursor:
            colum_ans = await cursor.fetchone()
    return colum_ans[0]

#–°—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–¥ –ø–æ –∫–æ–ª–æ–Ω–∫–µ –∏ id —á–∞—Ç–∞
async def set_value_in_bd(colum, value, id): #–∑–Ω–∞—á–µ–Ω–∏–µ colum –í–°–ï–ì–î–ê –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –≤ —Ç—Ä–æ–π–Ω—ã—Ö –¥–≤–æ–π–Ω—ã—Ö –∫–æ–≤—ã—á–∫–∞—Ö, —Ç–æ–µ—Å—Ç—å """[colum]"""
    async with aiosqlite.connect('bot.db', check_same_thread=False) as db:
        await db.execute(f"""UPDATE users SET {colum} = ? WHERE id = ?""", (value, id,))
        await db.commit()

#–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_my_property(bot, message):
    height = await get_value_from_bd("""size_height""", message.chat.id)
    width = await get_value_from_bd("""size_width""", message.chat.id)
    model = await get_value_from_bd("""model""", message.chat.id)
    cfg_scale = await get_value_from_bd("""cfg""", message.chat.id)
    n_iter = await get_value_from_bd("""countpic""", message.chat.id)
    sampler = await get_value_from_bd("""sampler""", message.chat.id)
    await edit_message(bot, message, text= f"‚ÑπÔ∏è ‚îÉ –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏:\n ‚îÉ {height} x {width}\n\n–ú–æ–¥–µ–ª—å:\n ‚îÉ {model}\n\n–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏:\n ‚îÉ {cfg_scale}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫:\n ‚îÉ {n_iter}\n\n–°—ç–º–ø–ª–µ—Ä:\n ‚îÉ {sampler}")


#–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /property
async def send_my_property(bot, message):
    height = await get_value_from_bd("""size_height""", message.chat.id)
    width = await get_value_from_bd("""size_width""", message.chat.id)
    model = await get_value_from_bd("""model""", message.chat.id)
    cfg_scale = await get_value_from_bd("""cfg""", message.chat.id)
    n_iter = await get_value_from_bd("""countpic""", message.chat.id)
    sampler = await get_value_from_bd("""sampler""", message.chat.id)
    await send_message(bot, message, text= f"‚ÑπÔ∏è ‚îÉ –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏:\n /size\n ‚îÉ {height} x {width}\n\n–ú–æ–¥–µ–ª—å:\n /model\n ‚îÉ {model}\n\n–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏:\n /cfg\n ‚îÉ {cfg_scale}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫:\n /countpic\n ‚îÉ {n_iter}\n\n–°—ç–º–ø–ª–µ—Ä:\n/sampler \n ‚îÉ {sampler}")




async def model_menu(bot, message):
    level = int(await get_value_from_bd("""level""", message.chat.id))
    match level:
        case 0:
            await send_message(bot, message, '‚ùå‚îÉ –í–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞, –∫—É–ø–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º',  input_buttons=['packs', 'menu'])
        case 1 | 2 | 3 | 777:
            await send_message(bot, message, text= f"–í–∞—à —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", input_buttons=(models_low if level == 1 else models_medium if level == 2 else models_premium if level == 3 else models_premium if level == 777 else 'fuck'))

async def model_set(bot, call):
    level = int(await get_value_from_bd("""level""", call.message.chat.id))
    match level:
        case 0:
            await send_message(bot, call.message, '‚ùå‚îÉ –í–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞, –∫—É–ø–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º',  input_buttons=['packs', 'menu'])
        case 1 | 2 | 3 | 777:
            if call.data.split(' ')[1] in (models_low if level == 1 else models_medium if level == 1 else models_premium if level == 3 else models_premium if level == 777 else 'fuck'):
                await set_value_in_bd("""model""",  models[call.data.split(' ')[1]], call.message.chat.id)
                await send_message(bot, call.message, '‚úÖ‚îÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏ `model` –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ ' + call.data.split(' ')[1],  input_buttons=['buy_packs', 'menu'])
            else:
                await send_message(bot, call.message, '‚ùå‚îÉ –ù–µ—Ç —Ç–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –≤–∞–º –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',  input_buttons=['buy_packs', 'menu'])

#–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
async def generate(bot, message):
    height:int = await get_value_from_bd("""size_height""", message.chat.id)
    width:int = await get_value_from_bd("""size_width""", message.chat.id)
    model:str = await get_value_from_bd("""model""", message.chat.id)
    cfg_scale:float = await get_value_from_bd("""cfg""", message.chat.id)
    n_iter:int = await get_value_from_bd("""countpic""", message.chat.id)
    sampler:str = await get_value_from_bd("""sampler""", message.chat.id)
    pr:str = ' '.join([i for n,i in enumerate(message.text.split(' ')) if n > 0])
    prompt:str = pr
    negative_prompt:str = ''
    if '!' in pr:
        prompts = pr.split('!')
        prompt = prompts[0]
        negative_prompt = prompts[1]
    
    message_num = randint(1, 3)
    if message_num == 1:
        message_local = "üîÉ‚îÉ –î–∞–π –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∂—É"
    elif message_num == 2:
        message_local = "üîÉ‚îÉ –ü–æ–¥–æ–∂–¥–∏, —è –¥—É–º–∞—é. –ö–∞–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –ø–æ–∫–∞–∂—É(^3^)"
    elif message_num == 3:
        message_local = "üîÉ‚îÉ –í –æ–±—Ä–æ–±–æ—Ç–∫–µ, –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç–æ–∫"
    await send_message(bot, message, message_local)
    await Req2neuro(url_=main_conf.cfg_d['url_sd_server'], prompt=prompt, negative_prompt=negative_prompt, width=width, height=height, cfg_scale=cfg_scale, model=model, sampler=sampler, n_iter=n_iter, steps=25, func=send_photo, bot=bot, message=message)

    if message_num == 1:
        message_local = "‚úÖ‚îÉ –í—Å—ë –≥–æ—Ç–æ–≤–æ, —Å–º–æ—Ç—Ä–∏"
    elif message_num == 2:
        message_local = "‚úÖ‚îÉ –û–≥–æ, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–æ—Å—å!:–∑"
    elif message_num == 3:
        message_local = "‚úÖ‚îÉ –í–æ—Ç –≤–∞—à –∑–∞–∫–∞–∑"
    await send_message(bot, message, message_local, parse_mode="Markdown")